import java.util.regex.Pattern

buildscript {
  repositories {
    maven { url 'https://consensys.bintray.com/consensys/' }
    jcenter()
  }
  dependencies { classpath 'com.yubico:gradle-gpg-signing-plugin:0.1.0-alpha1' }
}
plugins {
  id 'com.diffplug.gradle.spotless' version '3.10.0'
  id 'net.ltgt.errorprone' version '0.0.13'
  id 'io.spring.dependency-management' version '1.0.4.RELEASE'
  id 'com.github.hierynomus.license' version '0.14.0'
  id 'com.jfrog.bintray' version '1.8.1'
}


//////
// Version numbering

def versionNumber = '0.2.0'
def buildVersion = versionNumber + buildTag()

String buildTag() {
  if (System.getenv('BUILD_TAG_MODE') == 'release') {
    return ''
  }
  if (!System.getenv('CIRCLECI')) {
    return '-dev'
  }
  return '-' + System.getenv('CIRCLE_SHA1').take(4).toUpperCase() +
    String.format('%02X', System.getenv('CIRCLE_BUILD_NUM').toInteger() % 256, 16) +
    (System.getenv('BUILD_ENVIRONMENT_TAG') ?: '-snapshot')
}


//////
// Default tasks and build aliases

defaultTasks 'build', 'checkLicenses', 'javadoc'

def buildAliases = ['dev': [
    'spotlessApply',
    'build',
    'checkLicenses',
    'javadoc'
  ]]

def expandedTaskList = []
gradle.startParameter.taskNames.each {
  expandedTaskList << (buildAliases[it] ? buildAliases[it] : it)
}
gradle.startParameter.taskNames = expandedTaskList.flatten()


//////
// Project defaults

allprojects {
  apply plugin: 'java-library'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'jacoco'
  apply plugin: 'signing'
  apply plugin: 'com.yubico.signing.gpg'
  apply plugin: 'net.ltgt.errorprone'
  apply plugin: 'com.jfrog.bintray'
  apply plugin: 'com.diffplug.gradle.spotless'
  apply from: "${rootDir}/dependency-versions.gradle"
  apply from: "${rootDir}/gradle/check-licenses.gradle"

  version = buildVersion

  repositories { jcenter() }


  //////
  // Use JUnit5 for testing

  test { useJUnitPlatform() }


  //////
  // Source formatting

  spotless {
    java {
      removeUnusedImports()
      eclipse().configFile(rootProject.file('gradle/eclipse-java-consensys-style.xml'))
      importOrder 'net.consensys', 'java', ''
      endWithNewline()
    }
    groovyGradle {
      target '**/*.gradle'
      greclipse().configFile(rootProject.file('gradle/greclipse-gradle-consensys-style.properties'))
      endWithNewline()
    }
  }


  //////
  // Compiler arguments

  tasks.withType(JavaCompile) {
    options.compilerArgs += [
      '-proc:none',
      '-Xlint:unchecked',
      '-Xlint:cast',
      '-Xlint:rawtypes',
      '-Xlint:overloads',
      '-Xlint:divzero',
      '-Xlint:finally',
      '-Xlint:static',
      '-Werror',
      '-Xep:FutureReturnValueIgnored:OFF'
    ]
  }
}

task jacocoRootTestReport(type: JacocoReport) {
  dependsOn = subprojects.test
  additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
  sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
  classDirectories =  files(subprojects.sourceSets.main.output)
  executionData = files(subprojects.jacocoTestReport.executionData)
  reports {
    html.enabled = true
    xml.enabled = true
    csv.enabled = false
  }
  doFirst {
    executionData = files(executionData.findAll { it.exists() })
  }
}


//////
// Top-level target for deploy (bintrayUpload depends on it)

task deploy() {}


subprojects {

  tasks.withType(Jar) {
    baseName = rootProject.name + '-' + project.name
    manifest {
      attributes('Implementation-Title': baseName,
      'Implementation-Version': project.version)
    }
  }
  //////
  // Publish all jars into build/libs

  tasks.withType(Jar) {
    destinationDir = file("${rootProject.buildDir}/libs")
  }

  task sourcesJar(type: Jar, dependsOn: classes) {
    destinationDir = file("${rootProject.buildDir}/src")
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    destinationDir = file("${rootProject.buildDir}/docs")
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  //////
  // Parallel build execution

  tasks.withType(Test) {
    // If GRADLE_MAX_TEST_FORKS is not set, use half the available processors
    maxParallelForks = (System.getenv('GRADLE_MAX_TEST_FORKS') ?:
      (Runtime.runtime.availableProcessors().intdiv(2) ?: 1)).toInteger()
  }
  tasks.withType(JavaCompile) {
    options.fork = true
    options.incremental = true
  }

  task allDependencies(type: DependencyReportTask) {}

  //////
  // Publishing

  apply plugin: 'maven-publish'


  signing {
    useGpgCmd()
    sign configurations.archives
  }

  tasks.withType(Sign) {
    onlyIf { System.getenv('ENABLE_SIGNING') == 'true' }
  }

  artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
  }

  publishing {
    publications {
      MavenDeployment(MavenPublication) {
        from components.java
        artifact sourcesJar { classifier 'sources' }
        artifact javadocJar { classifier 'javadoc' }
        groupId 'org.logl'
        artifactId project.jar.baseName
        version project.version
        pom {
          name = project.jar.baseName
          description = project.description
          url = 'https://github.com/ConsenSys/logl'
          licenses {
            license {
              name = "The Apache License, Version 2.0"
              url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
            }
          }
          scm {
            connection = 'scm:https://github.com/ConsenSys/logl.git'
            developerConnection = 'scm:git@github.com:ConsenSys/logl.git'
            url = 'https://github.com/ConsenSys/logl'
          }
          developers {
            developer {
              name = 'Chris Leishman'
              email = 'chris@leishman.org'
              organization = 'ConsenSys'
              organizationUrl = 'https://www.consensys.net'
            }
            developer {
              name = 'Antoine Toulme'
              email = 'antoine@lunar-ocean.com'
              organization = 'ConsenSys'
              organizationUrl = 'https://www.consensys.net'
            }
          }
        }
      }
    }
  }

  def artifactIdMatcher = Pattern.compile("(.*)-\\d.*")
  bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['MavenDeployment']
    filesSpec {
      project.extensions.getByType(PublishingExtension).publications.all { publication ->
        publication.getArtifacts().all {
          def ascFile = new File(it.file.getParentFile(), it.file.getName() + '.asc')
          if (ascFile.exists()) {
            def matcher = artifactIdMatcher.matcher(it.file.getName())
            matcher.find()
            def artifactId = matcher.group(1)
            from ascFile.getAbsolutePath()
            into publication.groupId.replaceAll('\\.', '/') + '/' + artifactId + '/' + publication.version + '/'
          }
        }
      }
    }
    dryRun = !(System.getenv('BINTRAY_DEPLOY') == 'true')
    pkg {
      userOrg = 'consensys'
      repo = 'consensys'
      name = 'logl'
      websiteUrl = 'https://github.com/ConsenSys/logl'
      vcsUrl = 'https://github.com/ConsenSys/logl'
      licenses = [
        'Apache License, Version 2.0'
      ]
      version {
        name = project.version
        desc = 'Logl distribution'
        released = new Date()
        vcsTag = project.version
      }
    }
  }
  deploy.dependsOn bintrayUpload

}


//////
// Bundle all subproject javadoc into a single set

javadoc {
  options.overview("${rootProject.projectDir}/site/overview.html")
  subprojects.each {
    dependsOn it.javadoc
    source += it.javadoc.source
    classpath += it.javadoc.classpath
  }
}


//////
// Don't build a top-level jar

jar { enabled = false }
